from twitchio.ext import commands
import twitchio
import requests
import json
import random
from deep_translator import GoogleTranslator
from transliterate import translit
import csv
import pandas as pd
import datetime
import time
import urllib
import re
from datetime import date

HEADERS = { #–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è API OpenAI, –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–ª–∞—Ç–Ω—ã–º, –≤—Ä–æ–¥–µ –±—ã —á–µ—Ä–µ–∑ –æ–¥–Ω—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É—é
    'Authorization': 'Bearer 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', 
    'Content-Type': 'application/json'
}
weather_api_key = '62974faf81d841e3833101541232104'

banlist = ['TheRennaisance', 'Remoornie']
afk_list = []


class Bot(commands.Bot):
    def __init__(self):
        super().__init__(
            token="oauth:8633bmzy890o7alhrt6fvm1tvq45jx", #–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∏–∑-–∑–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ—Ç–∫—Ä—ã–π –¥–æ—Å—Ç—É–ø
            prefix="$", #–ü—Ä–µ—Ñ–∏–∫—Å –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω—é –Ω–∞ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ 
            initial_channels=["striginae", "alexproduct"],
        )

    async def event_ready(self):
        print(f"Logged in as | {self.nick}")

    @commands.command()
    async def hello(self, ctx: commands.Context):
        await ctx.send(f"123")

    @commands.command()
    async def random_emote(self, ctx: commands.Context): #–≤—Ä–æ–¥–µ –±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É –Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–ø–∏
        response = requests.get(
            f"https://7tv.io/v3/emote-sets", params=ctx.channel.name
        ).text
        n = json.loads(response)
        await ctx.send(f"{n['emotes'][random.randint(0, len(n['emotes'])-1)]['name']}")

    @commands.command()
    async def random(self, ctx: commands.Context):
        n = random.randint(0, 100)
        if n == 69:
            await ctx.send('69! Nice')
        else:
            await ctx.send(str(n))

    @commands.command()
    async def prediction_ball(self, ctx: commands.Context):
        answers = ['üòÉ –ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ', 'üòÉ –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Ç–∞–∫', 'üòÉ –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è', 'üòÉ –î–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ', 'üòÉ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ', 'üòÉ –ù–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω–∏–º–∞—é, –¥–∞', 'üòÉ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ', 'üòÉ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ', 'üòÉ –î–∞', 'üòÉ –ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ "–¥–∞"', 'üòê –û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'üòê –°–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ', 'üòê –õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.', 'üòê –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', 'üòê –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑.', 'üò¶ –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ', 'üò¶ –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç.', 'üò¶ –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–µ—Ç.', 'üò¶ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.', 'üò¶ –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']
        await ctx.send(random.choice(answers))

    @commands.command()
    async def coin_flip(self, ctx: commands.Context):
        answers = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
        await ctx.send(random.choice(answers))

    @commands.command()
    async def fill(self, ctx: commands.Context, *args):
        answer = []
        while len(' '.join(answer)) <= 500:
            answer.append(random.choice(args))
        while len(' '.join(answer)) >= 500:
            answer.pop(-1)
        await ctx.send(' '.join(answer))

    @commands.command()
    async def rmeal(self, ctx: commands.Context, arg='get'):
        response = requests.get('https://www.themealdb.com/api/json/v1/1/random.php').text
        n = json.loads(response)
        print(n)
        if arg == 'get':
            global old_n
            old_n = n.copy()
            ans = f"{n['meals'][0]['strMeal']}. Ingredients: "
            for i in range(1, 21):
                if n['meals'][0][f'strIngredient{i}'] != '' and n['meals'][0][f'strIngredient{i}'] != None:
                    ans += n['meals'][0][f'strIngredient{i}']
                    ans += ', '
            await ctx.send(GoogleTranslator(source='auto', target='ru').translate(ans.rstrip(', ')))
        elif arg == 'recipe':
            for i in old_n['meals'][0][f'strInstructions'].split('\r\n'):
                await ctx.send(GoogleTranslator(source='auto', target='ru').translate(i))
        elif arg == 'video':
            await ctx.send(old_n['meals'][0][f'strYoutube'])
            

    @commands.command()
    async def transliterate(self, ctx: commands.Context, *args):
        await ctx.send(translit(' '.join(args), reversed=True))

    @commands.command()
    async def translate(self, ctx: commands.Context, language, *args):
        args = list(args)
        for i in range(len(args)):
            args[i] = GoogleTranslator(source='auto', target=language).translate(args[i])
        await ctx.send(' '.join(args))

    async def event_message(self, message):
        ctx = commands.Context(message, self.__init__)
        with open("afks.json", "r", encoding="utf-8") as f:
                text = json.load(f)
        if message.content.startswith('Striginea'):
            if ' –∏–ª–∏ ' in message.content:
                res = list(message.content.split(' –∏–ª–∏ '))
                await ctx.send(random.choice(res).strip('Striginea').strip('?'))
        elif message.author.name in text[1]:
            flag = False
            for i in text[0]:
                if i['nickname_twitch'] == ctx.author.name:
                    res_message = i['afk_message']
                    i['afk_status'] = False
                    i['afk_message'] = ''
                    i['afk_type'] = ''
                    try:
                        text[1].pop(text[1].index(i['nickname_discord']))
                    except:
                        pass
                    break
            text[1].pop(text[1].index(ctx.author.name))
            await ctx.send(f'{ctx.author.display_name} –≤–µ—Ä–Ω—É–ª—Å—è: {res_message}')
            with open("afks.json", "w") as f:
                json.dump(text, f)
        else:
            await self.handle_commands(message) 

    @commands.command()
    async def afk(self, ctx: commands.Context, *afk_message):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                i['afk_status'] = True
                i['afk_message'] = ' '.join(afk_message)
                i['afk_type'] = 'afk'
                if i['platform_connected'] == False:
 #                   await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
                    pass
                else:
                    text[1].append(i['nickname_discord'])
                flag = True
                break
        if not flag:
            text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk', 'afk_status': True, 'afk_message': ' '.join(afk_message), 'platform_connected': False})
 #           await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
        text[1].append(ctx.author.name)
        await ctx.send(f'{ctx.author.display_name} –æ—Ç–æ—à–µ–ª –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {" ".join(afk_message)}')
        with open("afks.json", "w") as f:
            json.dump(text, f)

    @commands.command()
    async def Fridge(self, ctx: commands.Context):
       await ctx.send('–í–û–†–£–Æ –ò–ó –¢–í–û–ï–ì–û Fridge')
       time.sleep(10)
       await ctx.send('–£–ö–†–ê–õ SOLE –ò–ó –¢–í–û–ï–ì–û Fridge')


    @commands.command()
    async def weather(self, ctx: commands.Context, location):
        response = requests.get(
            f"http://api.weatherapi.com/v1/current.json", params={'key': weather_api_key, 'q': location}
        ).text
        n = json.loads(response)
        await ctx.send(GoogleTranslator(source='auto', target='ru').translate(f"{n['location']['country']}, {n['location']['region']}, {n['location']['name']}: Temperature {n['current']['temp_c']} C¬∞, feels like {n['current']['feelslike_c']} C¬∞, {n['current']['condition']['text']}, wind speed {n['current']['wind_kph']} kmph. üå§ "))

    #@commands.command()
    #async def air(self, ctx: commands.Context, location):
    #    response = requests.get(
    #        f"http://api.weatherapi.com/v1/current.json", params={'key': weather_api_key, 'q': location, 'aqi': True}
    #    ).text
    #    n = json.loads(response)
    #    print(n)
    #    await ctx.send(GoogleTranslator(source='auto', target='ru').translate(f"{n['location']['country']}, {n['location']['region']}, {n['location']['name']}: –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ {n['current']['aqi']}"))

    @commands.command()
    async def gn(self, ctx: commands.Context, *afk_message):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                i['afk_status'] = True
                i['afk_message'] = ' '.join(afk_message)
                i['afk_type'] = 'sleep'
                if i['platform_connected'] == False:
  #                   await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
                    pass
                else:
                    text[1].append(i['nickname_discord'])
                flag = True
                break
        if not flag:
            text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': ' '.join(afk_message), 'platform_connected': False})
#            await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
        text[1].append(ctx.author.name)
        await ctx.send(f'{ctx.author.display_name} —É—à–µ–ª —Å–ø–∞—Ç—å: {" ".join(afk_message)}')
        with open("afks.json", "w") as f:
            json.dump(text, f)

    @commands.command()
    async def nap(self, ctx: commands.Context, *afk_message):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                i['afk_status'] = True
                i['afk_message'] = ' '.join(afk_message)
                i['afk_type'] = 'nap'
                if i['platform_connected'] == False:
 #                   await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
                    pass
                else:
                    text[1].append(i['nickname_discord'])
                flag = True
                break
        if not flag:
            text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': ' '.join(afk_message), 'platform_connected': False})
#            await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
        text[1].append(ctx.author.name)
        await ctx.send(f'{ctx.author.display_name} –ø—Ä–∏–ª–µ–≥ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å: {" ".join(afk_message)}')
        with open("afks.json", "w") as f:
            json.dump(text, f)
    
    @commands.command()
    async def study(self, ctx: commands.Context, *afk_message):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                i['afk_status'] = True
                i['afk_message'] = ' '.join(afk_message)
                i['afk_type'] = 'study'
                if i['platform_connected'] == False:
#                    await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
                    pass
                else:
                    text[1].append(i['nickname_discord'])
                flag = True
                break
        if not flag:
            text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': ' '.join(afk_message), 'platform_connected': False})
#            await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
        text[1].append(ctx.author.name)
        await ctx.send(f'{ctx.author.display_name} –∑–∞–Ω—è–ª—Å—è —É—á–µ–±–æ–π: {" ".join(afk_message)}')
        with open("afks.json", "w") as f:
            json.dump(text, f)
    
    @commands.command()
    async def work(self, ctx: commands.Context, *afk_message):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                i['afk_status'] = True
                i['afk_message'] = ' '.join(afk_message)
                i['afk_type'] = 'work'
                if i['platform_connected'] == False:
#                    await ctx.send(f'{ctx.author.display_name} , –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–∏—Å–∫–æ—Ä–¥ –∞–∫–∫–∞—É–Ω—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ $connect –Ω–∏–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ $connect not –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ')
                    pass
                else:
                    text[1].append(i['nickname_discord'])
                flag = True
                break
        if not flag:
            text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': ' '.join(afk_message), 'platform_connected': False})
        text[1].append(ctx.author.name)
        await ctx.send(f'{ctx.author.display_name} —É—à–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å: {" ".join(afk_message)}')
        with open("afks.json", "w") as f:
            json.dump(text, f)

    @commands.command()
    async def yt(self, ctx: commands.Context, *keywords):
        query_string = urllib.parse.urlencode({"search_query": ' '.join(keywords)})
        html_content = urllib.request.urlopen("http://www.youtube.com/results?" + query_string)
        search_results = re.findall(r"watch\?v=(\S{11})", html_content.read().decode())
        await ctx.send("http://www.youtube.com/watch?v=" + search_results[0])

    @commands.command()
    async def dt(self, ctx: commands.Context):
        current_date = date.today()
        await ctx.send(f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {current_date}.")

    @commands.command()
    async def funfact(self, ctx: commands.Context):
        year = random.randint(2017, 2021)
        month = random.randint(1, 12)
        n = requests.get("https://uselessfacts.net/api/posts", params={'d': (year, month)}).json()
        await ctx.send(GoogleTranslator(source='auto', target='ru').translate(n[random.randint(0, len(n) - 1)]['title']))

    @commands.command()
    async def connecty(self, ctx: commands.Context, nickname):
        with open("afks.json", "r", encoding="utf-8") as f:
            text = json.load(f)
        flag = False
        for i in text[0]:
            if i['nickname_twitch'] == ctx.author.name:
                if nickname == 'not':
                    i['platform_connected'] = True
                else:
                    i['platform_connected'] = True
                    i['nickname_discord'] = nickname
        if not flag:
            if nickname == 'not':
                text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': '', 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': '', 'platform_connected': True})
            else:
                text[0].append({'nickname_twitch': ctx.author.name, 'nickname_discord': nickname, 'afk_type': 'afk_status', 'afk_status': True, 'afk_message': '', 'platform_connected': True})
        with open("afks.json", "w") as f:
            json.dump(text, f)

    @commands.command()
    async def hug(self, ctx: commands.Context, target):
        await ctx.send(f'{ctx.author.display_name} , –≤—ã –æ–±–Ω—è–ª–∏ {target}')

    @commands.command()
    async def tuck(self, ctx: commands.Context, target):
        await ctx.send(f'{ctx.author.display_name} , –≤—ã —É–ª–æ–∂–∏–ª–∏ —Å–ø–∞—Ç—å {target}')

        
        


    
    

bot = Bot()
bot.run()
