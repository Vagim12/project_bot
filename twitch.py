from twitchio.ext import commands
import twitchio
import requests
import json
import random
from deep_translator import GoogleTranslator
from transliterate import translit
import sqlite3

HEADERS = { #–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è API OpenAI, –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –ø–ª–∞—Ç–Ω—ã–º, –≤—Ä–æ–¥–µ –±—ã —á–µ—Ä–µ–∑ –æ–¥–Ω—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É—é
    'Authorization': 'Bearer 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', 
    'Content-Type': 'application/json'
}



class Bot(commands.Bot):
    def __init__(self):
        super().__init__(
            token="oauth:aq7iawwx0p8bys0vvn7vydviluo50h", #–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –∏–∑-–∑–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ—Ç–∫—Ä—ã–π –¥–æ—Å—Ç—É–ø
            prefix="‚ÇΩ", #–ü—Ä–µ—Ñ–∏–∫—Å –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω—é –Ω–∞ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            initial_channels=["striginae", "alexproduct"],
        )

    async def event_ready(self):
        print(f"Logged in as | {self.nick}")

    @commands.command()
    async def hello(self, ctx: commands.Context):
        await ctx.send(f"–Ø —Ä–æ–¥–∏–ª—Å—è")

    @commands.command()
    async def random_emote(self, ctx: commands.Context): #–≤—Ä–æ–¥–µ –±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É –Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–ø–∏
        response = requests.get(
            f"https://7tv.io/v3/emote-sets", params=ctx.channel.name
        ).text
        n = json.loads(response)
        await ctx.send(f"{n['emotes'][random.randint(0, len(n['emotes'])-1)]['name']}")

    @commands.command()
    async def random(self, ctx: commands.Context):
        n = random.randint(0, 100)
        if n == 69:
            await ctx.send('69! Nice')
        else:
            await ctx.send(str(n))

    @commands.command()
    async def prediction_ball(self, ctx: commands.Context):
        answers = ['üòÉ –ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ', 'üòÉ –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Ç–∞–∫', 'üòÉ –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è', 'üòÉ –î–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ', 'üòÉ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ', 'üòÉ –ù–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω–∏–º–∞—é, –¥–∞', 'üòÉ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ', 'üòÉ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ö–æ—Ä–æ—à–∏–µ', 'üòÉ –î–∞', 'üòÉ –ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ "–¥–∞"', 'üòê –û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'üòê –°–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ', 'üòê –õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.', 'üòê –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', 'üòê –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑.', 'üò¶ –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ', 'üò¶ –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç.', 'üò¶ –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–µ—Ç.', 'üò¶ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.', 'üò¶ –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']
        await ctx.send(random.choice(answers))

    @commands.command()
    async def coin_flip(self, ctx: commands.Context):
        answers = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
        await ctx.send(random.choice(answers))

    @commands.command()
    async def fill(self, ctx: commands.Context, *args):
        answer = []
        while len(' '.join(answer)) <= 500:
            answer.append(random.choice(args))
        answer.pop(-1)
        await ctx.send(' '.join(answer))

    @commands.command()
    async def rmeal(self, ctx: commands.Context, arg='get'):
        response = requests.get('https://www.themealdb.com/api/json/v1/1/random.php').text
        n = json.loads(response)
        if arg == 'get':
            global old_n
            old_n = n.copy()
            ans = f"{n['meals'][0]['strMeal']}. Ingredients: "
            for i in range(1, 21):
                if n['meals'][0][f'strIngredient{i}'] != '' and n['meals'][0][f'strIngredient{i}'] != None:
                    ans += n['meals'][0][f'strIngredient{i}']
                    ans += ', '
            await ctx.send(GoogleTranslator(source='auto', target='ru').translate(ans.rstrip(', ')))
        elif arg == 'recipe':
            for i in old_n['meals'][0][f'strInstructions'].split('\r\n'):
                await ctx.send(GoogleTranslator(source='auto', target='ru').translate(i))
        elif arg == 'video':
            await ctx.send(old_n['meals'][0][f'strYoutube'])
            

    @commands.command()
    async def transliterate(self, ctx: commands.Context, *args):
        await ctx.send(translit(' '.join(args), reversed=True))




bot = Bot()
bot.run()


#–ü—Ä–æ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–∞–Ω–¥, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä. –ù–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –¥–±, –Ω–æ —ç—Ç–æ –ø–æ–∑–∂–µ
#–ù–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
#–ï—â–µ –º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É, —É–ª–µ—Ç–∞—é –Ω–∞ —Ñ–∏–Ω–∞–ª –ù–¢–û
